// <auto-generated />
using System;
using HealthHub1.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HealthHub1.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250105075315_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HealthHub1.Models.Bed", b =>
                {
                    b.Property<int>("BedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BedId"));

                    b.Property<string>("BedNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("BedStatus")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BedId");

                    b.ToTable("Beds");
                });

            modelBuilder.Entity("HealthHub1.Models.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DoctorId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("HealthHub1.Models.Nurse", b =>
                {
                    b.Property<int>("NurseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NurseId"));

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("NurseId");

                    b.ToTable("Nurses");
                });

            modelBuilder.Entity("HealthHub1.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<DateTime>("AdmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("BedId")
                        .HasColumnType("int");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DischargeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("PatientId");

                    b.HasIndex("BedId")
                        .IsUnique()
                        .HasFilter("[BedId] IS NOT NULL");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("HealthHub1.Models.PatientDoctor", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.HasKey("PatientId", "DoctorId");

                    b.HasIndex("DoctorId");

                    b.ToTable("PatientDoctors");
                });

            modelBuilder.Entity("HealthHub1.Models.PatientHistory", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HistoryId"));

                    b.Property<int?>("AddedByDoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("AddedByNurseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("HistoryId");

                    b.HasIndex("AddedByDoctorId");

                    b.HasIndex("AddedByNurseId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientHistories");
                });

            modelBuilder.Entity("HealthHub1.Models.PatientNurse", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("NurseId")
                        .HasColumnType("int");

                    b.HasKey("PatientId", "NurseId");

                    b.HasIndex("NurseId");

                    b.ToTable("PatientNurses");
                });

            modelBuilder.Entity("HealthHub1.Models.Patient", b =>
                {
                    b.HasOne("HealthHub1.Models.Bed", "Bed")
                        .WithOne("Patient")
                        .HasForeignKey("HealthHub1.Models.Patient", "BedId");

                    b.Navigation("Bed");
                });

            modelBuilder.Entity("HealthHub1.Models.PatientDoctor", b =>
                {
                    b.HasOne("HealthHub1.Models.Doctor", "Doctor")
                        .WithMany("PatientDoctors")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthHub1.Models.Patient", "Patient")
                        .WithMany("PatientDoctors")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HealthHub1.Models.PatientHistory", b =>
                {
                    b.HasOne("HealthHub1.Models.Doctor", "AddedByDoctor")
                        .WithMany("PatientHistories")
                        .HasForeignKey("AddedByDoctorId");

                    b.HasOne("HealthHub1.Models.Nurse", "AddedByNurse")
                        .WithMany("PatientHistories")
                        .HasForeignKey("AddedByNurseId");

                    b.HasOne("HealthHub1.Models.Patient", "Patient")
                        .WithMany("PatientHistories")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddedByDoctor");

                    b.Navigation("AddedByNurse");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HealthHub1.Models.PatientNurse", b =>
                {
                    b.HasOne("HealthHub1.Models.Nurse", "Nurse")
                        .WithMany("PatientNurses")
                        .HasForeignKey("NurseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthHub1.Models.Patient", "Patient")
                        .WithMany("PatientNurses")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nurse");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HealthHub1.Models.Bed", b =>
                {
                    b.Navigation("Patient")
                        .IsRequired();
                });

            modelBuilder.Entity("HealthHub1.Models.Doctor", b =>
                {
                    b.Navigation("PatientDoctors");

                    b.Navigation("PatientHistories");
                });

            modelBuilder.Entity("HealthHub1.Models.Nurse", b =>
                {
                    b.Navigation("PatientHistories");

                    b.Navigation("PatientNurses");
                });

            modelBuilder.Entity("HealthHub1.Models.Patient", b =>
                {
                    b.Navigation("PatientDoctors");

                    b.Navigation("PatientHistories");

                    b.Navigation("PatientNurses");
                });
#pragma warning restore 612, 618
        }
    }
}
